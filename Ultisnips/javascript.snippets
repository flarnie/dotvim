# Imports python helpers (like pascal_case_basename)
global !p
from snippet_helpers import *
endglobal

# React component boilerplate
snippet cc "createClass" b
const ${1:`!p snip.rv = pascal_case_basename(snip.basename)`} = React.createClass({
	/**
	 * @return {Object}
	 */
	render() {
		return (
			$0
		);
	}
});

module.exports = $1;
endsnippet

# Loops

snippet for "for loop" !
for (let ${1:i} = 0, len = ${2:array}.length; $1 < len; $1++) {
	$0${2/([^.]+).*/$1/}[$1]
}
endsnippet

snippet fori "for...in" b
for (let ${1:prop} in ${2:Things}) {
	if ($2.hasOwnProperty($1)) {
		${0:let ${3:value} = $2[$1];}
	}
}
endsnippet

snippet foro "for...of" b
for (let ${1:value} of ${2:Things}) {
	${0:${VISUAL}}
}
endsnippet

# Function

snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
	return " * @param {{}} {0}".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = "/**"
	for tag in tags:
		snip += tag
	snip += ' */'
	snip += ''
else:
	snip.rv = ''
`${1}: function(${2}) {
	${0:${VISUAL}}
},
endsnippet


# JSDoc

snippet /**
/**
 * ${0:${VISUAL}}
 */
endsnippet

snippet @par "@param {...}"
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret "@return {...}"
@return {${1:type}} ${0:description}
endsnippet


# Misc

snippet cl "console.log(...)" b
console.log($0);
endsnippet

snippet req "require" b
var `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return string.replace(lastPart.title(), '_', '');
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

snippet me "module.exports" b
module.exports = ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`};$0
endsnippet

# Jasmine


snippet des "describe() block"
describe('${1}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet con "context() block"
context('${1}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet bef "beforeEach() block"
beforeEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet aft "afterEach() block"
afterEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet it "it() block"
it('${1}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet exp "expect() assertion"
expect(${1})${2}.to${3}(${0:${VISUAL}});
endsnippet

global !p
def pascal_case_basename(basename):
    cleaned_name = re.sub('(_spec)?(\.js$)?', '', basename or 'ModuleName')
    return ''.join(x.title() for x in cleaned_name.split('_'))
endglobal

snippet sub "this.subject" b
this.subject = () => Utils.render(<${1:`!p snip.rv = pascal_case_basename(snip.basename)`} {...this.props} />);$0
endsnippet

# JSX

snippet cdm "componentDidMount" b
componentDidMount: function() {
	$0
},
endsnippet

snippet cdu "componentDidUpdate" b
/**
 * @param {Object} prevProps
 * @param {Object} prevState
 */
componentDidUpdate: function(prevProps, prevState) {
	$0
},
endsnippet

snippet cwm "componentWillMount" b
componentWillMount: function() {
	$0
},
endsnippet

snippet cwrp "componentWillReceiveProps" b
/**
 * @param {Object} nextProps
 */
componentWillReceiveProps: function(nextProps) {
	$0
},
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount: function() {
	$0
},
endsnippet

snippet cwu "componentWillUpdate" b
/**
 * @param {Object} nextProps
 * @param {Object} nextState
 */
componentWillUpdate: function(nextProps, nextState) {
	$0
},
endsnippet

snippet gdp "getDefaultProps" b
/**
 * @return {Object}
 */
getDefaultProps: function() {
	return {
		$0
	};
},
endsnippet

snippet gis "getInitialState" b
/**
 * @return {Object}
 */
getInitialState: function() {
	return {
		$0
	};
},
endsnippet

snippet pt "propTypes" b
propTypes: {
	$0
},
endsnippet

snippet scu "shouldComponentUpdate" b
/**
 * @param {Object} nextProps
 * @param {Object} nextState
 * @return {boolean}
 */
shouldComponentUpdate: function(nextProps, nextState) {
	return ${1:true};
},
endsnippet
