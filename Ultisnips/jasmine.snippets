snippet des "describe() block"
describe('${1}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet con "context() block"
context('${1}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet bef "beforeEach() block"
beforeEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet aft "afterEach() block"
afterEach(() => {
	${0:${VISUAL}}
});
endsnippet

snippet it "it() block"
it('${1}', () => {
	${0:${VISUAL}}
});
endsnippet

snippet exp "expect() assertion"
expect(${1})${2}.to${3}(${0:${VISUAL}});
endsnippet

global !p
def pascal_case_basename(basename):
    cleaned_name = re.sub('(_spec)?(\.js$)?', '', basename or 'ModuleName')
    return ''.join(x.title() for x in cleaned_name.split('_'))
endglobal

snippet sub "this.subject" b
this.subject = () => Utils.render(<${1:`!p snip.rv = pascal_case_basename(snip.basename)`} {...this.props} />);$0
endsnippet
